<?xml version="1.0"?><st-source><!-- Name: ParcelDeploymentComment: This package adds a menu item to the Package menu called "Deploy (w/ Prereqs)".  Selecting this option will prompt for a directory and then save the selected Pundle(s) and all of their deployment pre-requisites (that are in the current Store database) as parcels with source in the specified directory.  It doesn't re-deploy parcels that are already present and up-to-date.  Modified parcels are given a different version string so that they can be distinguished from published parcels.  It deploys the parcel in such a way that the source pointers stay where they are and don't move to the deployed sources file.This package is helpful if you deploy your system as a base image plus parcels.  You can deploy a parcel from your image to test a fix without going through an entire build process.  Also, the code for deploying parcels can be used as part of an automated build process (see ParcelBuilder, for example).DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1331DbUsername: randyDbVersion: 7DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'StoreBase' '') #(#any 'Browser-BrowserUI' ''))PackageName: ParcelDeploymentParcel: #('ParcelDeployment')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'StoreBase' #componentType #bundle) #(#name 'Browser-BrowserUI' #componentType #package #applicability #store))PrerequisiteParcels: #(#('Base VisualWorks' '') #('StoreBase' ''))PrintStringCache: (7,randy)Version: 7Date: 10:00:50 PM March 31, 2013 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on March 31, 2013 at 10:00:50 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ParcelDeployment</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pundle targetDirectory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StoreExtensionsApp</category><attributes><package>ParcelDeployment</package></attributes></class><shared-variable><name>LastDirectory</name><environment>ParcelDeployment</environment><private>false</private><constant>false</constant><category>shares</category><initializer>String new</initializer><attributes><package>ParcelDeployment</package></attributes></shared-variable><methods><class-id>ParcelDeployment</class-id> <category>private</category><body package="ParcelDeployment">parcelFileName	^targetDirectory construct: pundle parcelName , Parcel fileExtension</body><body package="ParcelDeployment">parcelSourceName	^targetDirectory construct: pundle parcelName , Parcel sourceExtension</body><body package="ParcelDeployment">parcelVersion	| versionTag |	pundle parentRecord ifNil: [^''].	versionTag := pundle parentRecord version.	pundle hasBeenModified 		ifTrue: 			[versionTag := '&lt;1p&gt; [&lt;2s&gt;]' expandMacrosWith: Timestamp now						with: versionTag].	^versionTag</body><body package="ParcelDeployment">recursiveMakePathAndDirectory: aDirectory 	aDirectory exists ifTrue: [^self].	self recursiveMakePathAndDirectory: aDirectory directory.	aDirectory makeDirectory</body></methods><methods><class-id>ParcelDeployment</class-id> <category>deploy</category><body package="ParcelDeployment">basicDeploy	| versionTag |	versionTag := self parcelVersion.	self recursiveMakePathAndDirectory: targetDirectory.	pundle silentPropertyAt: #version put: versionTag.	pundle silentPropertyAt: (pundle isBundle				ifTrue: [#bundleName]				ifFalse: [#packageName])		put: pundle name.	pundle isBundle		ifTrue: 			[pundle				silentPropertyAt: #parcelName put: pundle parcelName;				silentPropertyAt: #bundleStructure					put: (Store.PundleForParcel from: pundle saveLinks: false)].		[pundle parcelOutTo: self parcelFileName asString		sourceFileName: self parcelSourceName asString]			ensure: 				[#(#packageName #bundleName #version #bundleStructure)					do: [:each | pundle silentRemovePropertyAt: each ifAbsent: nil]].	self fixPermissions</body><body package="ParcelDeployment">deploy	Transcript		nextPutAll: pundle parcelName;		space.	self shouldDeploy 		ifTrue: 			[self basicDeploy.			Transcript				nextPutAll: self parcelVersion;				nextPutAll: ' written']		ifFalse: [Transcript nextPutAll: 'up to date'].	Transcript		cr;		endEntry</body><body package="ParcelDeployment">fixPermissions	(self parcelFileName isKindOf: UnixFilename) 		ifTrue: 			[self parcelFileName setProtection: 8r666.			self parcelSourceName setProtection: 8r666]</body><body package="ParcelDeployment">shouldDeploy	| versionTag parcelFileName parcelTag |	pundle hasBeenModified ifTrue: [^true].	parcelFileName := self parcelFileName.	parcelFileName exists ifFalse: [^true].	versionTag := pundle parentRecord version.	parcelTag := (CodeReader new readInfoFromFileNamed: parcelFileName) 				at: #version				ifAbsent: [nil].	^versionTag ~= parcelTag</body></methods><methods><class-id>ParcelDeployment</class-id> <category>initialize</category><body package="ParcelDeployment">pundle: aPundle directory: aDirectory 	pundle := aPundle.	targetDirectory := aDirectory asFilename.	LastDirectory := targetDirectory asString</body></methods><methods><class-id>ParcelDeployment class</class-id> <category>instance creation</category><body package="ParcelDeployment">pundle: aPundle directory: aDirectory 	^self new pundle: aPundle directory: aDirectory</body></methods><methods><class-id>Kernel.CodeComponent</class-id> <category>accessing</category><body package="ParcelDeployment">addAllDeploymentPrerequisitesSatisfying: aBlock into: aSequence	| toTraverse |	toTraverse := (self immediateDeploymentPrerequisitesSatisfying: aBlock)				reject: [:each | aSequence includes: each].	toTraverse		do: [:each | each addAllDeploymentPrerequisitesSatisfying: aBlock into: aSequence].	toTraverse		do: [:each | (aSequence includes: each) ifFalse: [aSequence add: each]]</body><body package="ParcelDeployment">immediateDeploymentPrerequisitesSatisfying: aBlock	^((self prerequisiteDescriptions reject: #isStoreOnly)		collect: #loadedCodeComponent)			select: [:each | each notNil and: [aBlock value: each]]</body></methods><methods><class-id>Kernel.CodeComponent</class-id> <category>properties</category><body package="ParcelDeployment">silentPropertyAt: symbol put: aValue 	properties at: symbol put: aValue</body><body package="ParcelDeployment">silentRemovePropertyAt: symbol ifAbsent: aBlock 	properties removeKey: symbol ifAbsent: aBlock</body></methods><methods><class-id>Kernel.CodeComponent</class-id> <category>accessing</category><body package="ParcelDeployment">withAllDeploymentPrerequisites	^self withAllDeploymentPrerequisitesSatisfying: [:ignored | true]</body><body package="ParcelDeployment">withAllDeploymentPrerequisitesSatisfying: aBlock	| list |	list := OrderedCollection new.	self addAllDeploymentPrerequisitesSatisfying: aBlock into: list.	list addLast: self.	^list</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>menus</category><body package="ParcelDeployment">deployParcelTree	&lt;	menuItem: 'Deploy (w/ Prereqs)...'	nameKey: nil	enablement: #isPundleSelected	indication: nil	menu: #(#pundleMenu)	position: 25.8&gt;	| path |	path := Dialog requestDirectoryName: 'Directory to deploy into?'				default: ParcelDeployment.LastDirectory.	path isEmpty ifTrue: [^self].	self pundles do: 			[:buckage |			buckage leafItems do: 					[:package |					(package						withAllDeploymentPrerequisitesSatisfying: [:each | each isInCurrentDatabase])							do: [:prereq | (ParcelDeployment pundle: prereq directory: path) deploy]]]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>CodeComponent</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Code Components</category><attributes><package>System-Code Components</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class></st-source>