<?xml version="1.0"?><st-source><!-- Name: StoreCI-Building-TestsNotice: The MIT LicenseCopyright (c) 2012 - 2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: StoreCI is licensed under the MIT license.  See the Copyright tab in the RB, or the 'notice' property of this package.This package contains the unit tests for the StoreCI-Polling package.  See that package's comment for more information.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1440DbUsername: randyDbVersion: 8DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'StoreBase' '') #(#any 'StoreCI-Building' '') #(#any 'StoreCI-Support' '') #(#any 'StoreCI-Support-Tests' '') #(#any 'SUnitToo' ''))PackageName: StoreCI-Building-TestsParcel: #('StoreCI-Building-Tests')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'StoreBase' #componentType #bundle) #(#name 'StoreCI-Building' #componentType #package) #(#name 'StoreCI-Support' #componentType #package) #(#name 'StoreCI-Support-Tests' #componentType #package) #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('StoreBase' '') #('StoreCI-Building' '') #('StoreCI-Support' '') #('StoreCI-Support-Tests' '') #('SUnitToo' ''))PrintStringCache: (8,randy)Version: 8Date: 10:01:05 PM March 31, 2013 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on March 31, 2013 at 10:01:05 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BuildingSubsystemTest</name><environment>StoreCI.Building</environment><super>StoreCI.Support.StoreCISubsystemTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Building-Tests</package></attributes></class><class><name>StubBuildingSubsystem</name><environment>StoreCI.Building</environment><super>StoreCI.Building.BuildingSubsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>runBlock commandLineTokens exitCode loadedPundles parcelsWritten imagePundles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Building-Tests</package></attributes></class><methods><class-id>StoreCI.Building.BuildingSubsystemTest</class-id> <category>initialize-release</category><body package="StoreCI-Building-Tests">setUp	super setUp.	self		setUpValidRepository;		setUpValidInputFile</body><body package="StoreCI-Building-Tests">setUpValidInputFile	system addTokens: (Array with: '-loadPundlesIn' with: 'parcelList')</body><body package="StoreCI-Building-Tests">setUpValidRepository	| repositoryName |	repositoryName := Store.RepositoryManager repositories any name.	system addTokens: (Array with: '-repository' with: repositoryName)</body><body package="StoreCI-Building-Tests">subsystemClass	^StubBuildingSubsystem</body></methods><methods><class-id>StoreCI.Building.StubBuildingSubsystem</class-id> <category>private</category><body package="StoreCI-Building-Tests">configuredLoader	^self</body><body package="StoreCI-Building-Tests">configuredWriter	^self</body><body package="StoreCI-Building-Tests">exitWithCode: anInteger	exitCode := anInteger</body></methods><methods><class-id>StoreCI.Building.StubBuildingSubsystem</class-id> <category>initialize/release</category><body package="StoreCI-Building-Tests">initialize	super initialize.	commandLineTokens := OrderedCollection with: '/path/to/virtualMachine'				with: ObjectMemory imageName.	loadedPundles := false</body></methods><methods><class-id>StoreCI.Building.StubBuildingSubsystem</class-id> <category>accessing</category><body package="StoreCI-Building-Tests">exitCode	^exitCode</body><body package="StoreCI-Building-Tests">loadedPundles	^loadedPundles</body><body package="StoreCI-Building-Tests">parcelsWritten	^parcelsWritten</body><body package="StoreCI-Building-Tests">run	runBlock ifNil: [super run] ifNotNil: #value</body><body package="StoreCI-Building-Tests">runUsing: aBlock	runBlock := aBlock.	self runActivationActions</body></methods><methods><class-id>StoreCI.Building.StubBuildingSubsystem</class-id> <category>self shunt</category><body package="StoreCI-Building-Tests">imagePundles	^imagePundles</body><body package="StoreCI-Building-Tests">loadPundles	imagePundles := Object new.	loadedPundles := true</body><body package="StoreCI-Building-Tests">writeParcels: aCollection	parcelsWritten := aCollection</body></methods><methods><class-id>StoreCI.Building.StubBuildingSubsystem</class-id> <category>adding</category><body package="StoreCI-Building-Tests">addTokens: anArray	commandLineTokens addAll: anArray</body></methods><methods><class-id>StoreCI.Building.StubBuildingSubsystem</class-id> <category>private-activate/deactivate</category><body package="StoreCI-Building-Tests">commandLine	^commandLineTokens</body></methods><methods><class-id>StoreCI.Building.BuildingSubsystemTest</class-id> <category>tests</category><body package="StoreCI-Building-Tests">doesntRunIfNoInputFile	&lt;test&gt;	system := self newSystem.	self setUpValidRepository.	self assertNotRun</body><body package="StoreCI-Building-Tests">doesntRunIfNoRepository	&lt;test&gt;	system := self newSystem.	self setUpValidInputFile.	self assertNotRun</body><body package="StoreCI-Building-Tests">doesntWriteParcelsIfNoTargetDirectory	&lt;test&gt;	system runActivationActions.	self assert: system parcelsWritten isNil</body><body package="StoreCI-Building-Tests">loadsPundles	&lt;test&gt;	system runActivationActions.	self assert: system loadedPundles</body><body package="StoreCI-Building-Tests">raisesAnErrorWhenRepositoryNotFound	&lt;test&gt;	system := self newSystem.	self enableDebugging.	system addTokens: #('-repository' 'No Such Repository').	self should: [system runActivationActions] raise: RepositoryNotFound</body><body package="StoreCI-Building-Tests">setsDebugFlagBeforeProcessingOtherArguments	&lt;test&gt;	system addTokens: #('-repository' 'NoSuchRepository' '-debug').	self should: [system runActivationActions] raise: RepositoryNotFound</body><body package="StoreCI-Building-Tests">writesParcels	&lt;test&gt;	system addTokens: #('-writeParcelsTo' 'targetDirectory').	system runActivationActions.	self assert: system parcelsWritten == system imagePundles</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>BuildingSubsystem</name><environment>StoreCI.Building</environment><super>StoreCI.Support.StoreCISubsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetDirectory repository inputFilename </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ParcelBuilder</category><attributes><package>StoreCI-Building</package></attributes></class><class><name>StoreCISubsystemTest</name><environment>StoreCI.Support</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>errorStream system </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Support-Tests</package></attributes></class></st-source>