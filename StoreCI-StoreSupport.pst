<?xml version="1.0"?><st-source><!-- Name: StoreCI-StoreSupportNotice: The MIT LicenseCopyright (c) 2012 - 2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: StoreCI is licensed under the MIT license.  See the Copyright tab in the RB, or the 'notice' property of this package.StoreCI-Support contains Store-related support code for StoreCI.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1478DbUsername: randyDbVersion: 2DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'StoreBase' '') #(#any 'StoreCI-Support' ''))Namespace: StoreCI.SupportPackageName: StoreCI-StoreSupportParcel: #('StoreCI-StoreSupport')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'StoreBase' #componentType #bundle) #(#name 'StoreCI-Support' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('StoreBase' '') #('StoreCI-Support' ''))PrintStringCache: (2,randy)Version: 2Date: 6:54:40 PM April 17, 2013 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on April 17, 2013 at 6:54:40 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RepositoryNotFound</name><environment>StoreCI.Support</environment><super>Core.Error</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-StoreSupport</package></attributes></class><comment><class-id>StoreCI.Support.RepositoryNotFound</class-id><body>Raised when the Store repository name specified on the command-line could not be found in the RepositoryManager.</body></comment><class><name>ImportRepositoriesSubsystem</name><environment>StoreCI.Support</environment><super>Core.Subsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-StoreSupport</package></attributes></class><comment><class-id>StoreCI.Support.ImportRepositoriesSubsystem</class-id><body>ImportRepositoriesSubsystem is a utility subsystem that allows Store repository definitions to be imported from a properly-formatted XML file.Using this subsystem, it is possible to run StoreCI using an image that doesn't already include the necessary repository definitions.  An XML file of the proper format can be created by exporting repository definitions from the Store repository manager. ImportRepositoriesSubsystem accepts a single command-line argument, -repositoriesFrom, that takes the filename of the repository definition file.  -repositoryFrom, -reposFrom, and -repoFrom are aliases.</body></comment><class><name>PundleSpec</name><environment>StoreCI.Support</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pundleType name version </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-StoreSupport</package></attributes></class><comment><class-id>StoreCI.Support.PundleSpec</class-id><body>A simple token representing a Store Pundle.A PundleSpec knows how to persist and recover itself from a simple text-based format:PundleClassName&lt;tab&gt;"Name in Double Quotes"&lt;tab&gt;VersionThe Version field may be absent when dealing with "versionless" pundles.See #allFrom: and #parse: on the class side, and #writeOn: on the instance side.Instance Variables	name	&lt;String&gt;	The name of the pundle.	pundleType	&lt;StorePundle subclass&gt;	The class of the represented pundle (either StoreBundle or StorePackage).	version &lt;String or nil&gt; The version of the pundle, or nil if versionless.</body></comment><methods><class-id>StoreCI.Support.RepositoryNotFound</class-id> <category>printing</category><body package="StoreCI-StoreSupport">description	parameter ifNil: [^super description].	^'Could not find a repository named "&lt;1s&gt;"' expandMacrosWith: parameter</body></methods><methods><class-id>StoreCI.Support.ImportRepositoriesSubsystem</class-id> <category>prerequisites</category><body package="StoreCI-StoreSupport">prerequisiteSystems	^Array with: RuntimeSystem</body></methods><methods><class-id>StoreCI.Support.PundleSpec</class-id> <category>initialize-release</category><body package="StoreCI-StoreSupport">initializeType: aClass name: nameString version: versionString	pundleType := aClass.	name := nameString.	version := versionString</body></methods><methods><class-id>StoreCI.Support.PundleSpec</class-id> <category>accessing</category><body package="StoreCI-StoreSupport">componentType	^pundleType == Store.Glorp.StorePackage		ifTrue: [#package]		ifFalse: [#bundle]</body><body package="StoreCI-StoreSupport">name	^name</body><body package="StoreCI-StoreSupport">pundleType	^pundleType</body><body package="StoreCI-StoreSupport">version	^version</body></methods><methods><class-id>StoreCI.Support.PundleSpec</class-id> <category>comparing</category><body package="StoreCI-StoreSupport">= aPundleSpec	^name = aPundleSpec name and: 			[pundleType == aPundleSpec pundleType and: [version = aPundleSpec version]]</body><body package="StoreCI-StoreSupport">hash	^(name hash hashMultiply bitXor: pundleType hash) hashMultiply		bitXor: version hash</body></methods><methods><class-id>StoreCI.Support.PundleSpec</class-id> <category>printing</category><body package="StoreCI-StoreSupport">printOn: aStream	aStream		nextPutAll: self class name;		nextPut: $(;		nextPutAll: (self name ifNil: ['']);		nextPut: $)</body><body package="StoreCI-StoreSupport">writeOn: aStream	aStream		nextPutAll: pundleType name;		tab;		nextPut: $";		nextPutAll: name;		nextPut: $".	version		ifNotNil: 			[aStream				tab;				nextPutAll: version]</body></methods><methods><class-id>StoreCI.Support.PundleSpec</class-id> <category>converting</category><body package="StoreCI-StoreSupport">versionless	"Answer a versionless instance represnting the same pundle as me"	^version ifNil: [self] ifNotNil: [self class named: name type: pundleType]</body></methods><methods><class-id>StoreCI.Support.PundleSpec class</class-id> <category>instance creation</category><body package="StoreCI-StoreSupport">forBundle: aString	^self forBundle: aString version: nil</body><body package="StoreCI-StoreSupport">forBundle: nameString version: versionString	^self named: nameString type: Store.Glorp.StoreBundle version: versionString</body><body package="StoreCI-StoreSupport">forPackage: aString	^self forPackage: aString version: nil</body><body package="StoreCI-StoreSupport">forPackage: nameString version: versionString	^self		named: nameString		type: Store.Glorp.StorePackage		version: versionString</body><body package="StoreCI-StoreSupport">named: aString type: aPundleClass	^self named: aString type: aPundleClass version: nil</body><body package="StoreCI-StoreSupport">named: nameString type: aPundleClass version: versionString	^self new initializeType: aPundleClass name: nameString version: versionString</body><body package="StoreCI-StoreSupport">parse: aString	| rs firstToken pundleType pundleName version |	rs := aString readStream.	rs skipSeparators.	firstToken := (rs upTo: Character tab) trimBlanks.	(#('StorePackage' 'StoreBundle') includes: firstToken)		ifTrue: 			[pundleType := Store.Glorp at: firstToken.			rs skipSeparators.			pundleName := (rs upTo: Character tab) trimBlanks]		ifFalse: 			[pundleType := Store.Glorp.StorePackage.			pundleName := firstToken].	pundleName first = $"		ifTrue: [pundleName := pundleName copyFrom: 2 to: pundleName size - 1].	rs skipSeparators.	version := rs upToEnd trimBlanks.	^version isEmpty		ifTrue: [self named: pundleName type: pundleType]		ifFalse: [self named: pundleName type: pundleType version: version]</body></methods><methods><class-id>StoreCI.Support.PundleSpec class</class-id> <category>loading</category><body package="StoreCI-StoreSupport">allFrom: aStream	| specs |	specs := OrderedCollection new.	[aStream atEnd] whileFalse: 			[| line |			line := aStream upTo: Character cr.			line isEmpty ifFalse: [specs add: (self parse: line)]].	^specs</body></methods><methods><class-id>StoreCI.Support.PundleSpec class</class-id> <category>saving</category><body package="StoreCI-StoreSupport">writeAll: aCollection to: aStream	aCollection do: 			[:each |			each writeOn: aStream.			aStream cr]</body></methods><methods><class-id>StoreCI.Support.ImportRepositoriesSubsystem</class-id> <category>command-line</category><body package="StoreCI-StoreSupport">importRepositoryDefinitions: aStream	&lt;option: '-repositoriesFrom' sequence: -50&gt;	&lt;option: '-repositoryFrom' sequence: -50&gt;	&lt;option: '-reposFrom' sequence: -50&gt;	&lt;option: '-repoFrom' sequence: -50&gt;	| filename rs |	filename := aStream next asFilename.	rs := filename readStream.	[Store.RepositoryManager importRepositoriesFromStream: rs]		ensure: [rs close]</body></methods><methods><class-id>Store.Glorp.StorePundle</class-id> <category>converting</category><body package="StoreCI-StoreSupport">asStoreCIPundleSpec	^PundleSpec		named: self name		type: self class		version: self version</body></methods><methods><class-id>Kernel.PrerequisiteDescription</class-id> <category>converting</category><body package="StoreCI-StoreSupport">asStoreCIPundleSpec	^self componentType == #bundle		ifTrue: [PundleSpec forBundle: self name]		ifFalse: [PundleSpec forPackage: self name]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Subsystem</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state canActivate prerequisites </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>System-Subsystems</category><attributes><package>System-Subsystems</package></attributes></class><class><name>Error</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>PrerequisiteDescription</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>client properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>System-Code Components</package></attributes></class><class><name>StorePundle</name><environment>Store.Glorp</environment><super>Store.Glorp.StoreSourceObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>comment properties propertiesBlob propertiesRecordDictionary version blessings currentBlessingLevel storeModel session versionless fullClasses </inst-vars><class-inst-vars>cache </class-inst-vars><imports>			private Store.*			private Store.Glorp.*			</imports><category></category><attributes><package>Store-Database Model</package></attributes></class></st-source>