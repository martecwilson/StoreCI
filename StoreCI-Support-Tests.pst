<?xml version="1.0"?><st-source><!-- Name: StoreCI-Support-TestsNotice: The MIT LicenseCopyright (c) 2012 - 2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: StoreCI is licensed under the MIT license.  See the Copyright tab in the RB, or the 'notice' property of this package.This package contains the unit tests for the StoreCI-Polling package.  See that package's comment for more information.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1427DbUsername: randyDbVersion: 4DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'StoreCI-Support' '') #(#any 'SUnitToo' ''))PackageName: StoreCI-Support-TestsParcel: #('StoreCI-Support-Tests')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'StoreCI-Support' #componentType #package) #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('StoreCI-Support' '') #('SUnitToo' ''))PrintStringCache: (4,randy)Version: 4Date: 10:01:04 PM March 31, 2013 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on March 31, 2013 at 10:01:04 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PundleSpecTest</name><environment>StoreCI.Support</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Support-Tests</package></attributes></class><class><name>StoreCISubsystemTest</name><environment>StoreCI.Support</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>errorStream system </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Support-Tests</package></attributes></class><methods><class-id>StoreCI.Support.StoreCISubsystemTest</class-id> <category>initialize-release</category><body package="StoreCI-Support-Tests">enableDebugging	system addTokens: #('-debug')</body><body package="StoreCI-Support-Tests">newSystem	errorStream := String new writeStream.	^self subsystemClass new errorStream: errorStream</body><body package="StoreCI-Support-Tests">setUp	system := self newSystem</body><body package="StoreCI-Support-Tests">subsystemClass	^self subclassResponsibility</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystemTest</class-id> <category>private</category><body package="StoreCI-Support-Tests">assertNotRun	system runUsing: [self assert: false description: 'Shouldn''t have run']</body><body package="StoreCI-Support-Tests">ignoreErrorsDuring: aBlock	^aBlock on: Error do: [:ex | ex return: nil]</body><body package="StoreCI-Support-Tests">runWithError	system runUsing: [self error: 'Expected']</body></methods><methods><class-id>StoreCI.Support.PundleSpecTest</class-id> <category>tests</category><body package="StoreCI-Support-Tests">convertingToVersionlessCreatesNewInstance	&lt;test&gt;	| spec |	spec := PundleSpec forPackage: 'Package' version: '42'.	self deny: spec versionless == spec</body><body package="StoreCI-Support-Tests">convertsVersionedToVersionless	&lt;test&gt;	| spec |	spec := PundleSpec forPackage: 'Package' version: '42'.	self assert: spec versionless = (PundleSpec forPackage: 'Package')</body><body package="StoreCI-Support-Tests">convertsVersionlessToVersionless	&lt;test&gt;	| spec |	spec := PundleSpec forPackage: 'Package'.	self assert: spec versionless == spec</body><body package="StoreCI-Support-Tests">ignoresWhitespaceInVersionedLegacyFormat	&lt;test&gt;	| spec |	spec := PundleSpec parse: '    PackageName	42    '.	self assert: spec = (PundleSpec forPackage: 'PackageName' version: '42')</body><body package="StoreCI-Support-Tests">ignoresWhitespaceInVersionlessLegacyFormat	&lt;test&gt;	| spec |	spec := PundleSpec parse: '    PackageName     '.	self assert: spec = (PundleSpec forPackage: 'PackageName')</body><body package="StoreCI-Support-Tests">isEqualIfEverythingMatches	&lt;test&gt;	| spec1 spec2 |	spec1 := PundleSpec forPackage: 'Package' version: '42'.	spec2 := PundleSpec forPackage: 'Package' version: '42'.	self assert: spec1 = spec2</body><body package="StoreCI-Support-Tests">isEqualIfNamesAndTypesMatch	&lt;test&gt;	| spec1 spec2 |	spec1 := PundleSpec forPackage: 'Package'.	spec2 := PundleSpec forPackage: 'Package'.	self assert: spec1 = spec2</body><body package="StoreCI-Support-Tests">isEqualIfVersionlessNamesAndTypesMatch	&lt;test&gt;	| spec1 spec2 |	spec1 := PundleSpec forPackage: 'Package'.	spec2 := PundleSpec forPackage: 'Package'.	self assert: spec1 = spec2</body><body package="StoreCI-Support-Tests">isNotEqualIfNameDiffers	&lt;test&gt;	| spec1 spec2 |	spec1 := PundleSpec forPackage: 'Package'.	spec2 := PundleSpec forPackage: 'DifferentName'.	self deny: spec1 = spec2</body><body package="StoreCI-Support-Tests">isNotEqualIfOneIsVersionless	&lt;test&gt;	| spec1 spec2 |	spec1 := PundleSpec forPackage: 'Pundle' version: '42'.	spec2 := PundleSpec forPackage: 'Pundle'.	self deny: spec1 = spec2</body><body package="StoreCI-Support-Tests">isNotEqualIfTypeDiffers	&lt;test&gt;	| spec1 spec2 |	spec1 := PundleSpec forPackage: 'Pundle'.	spec2 := PundleSpec forBundle: 'Pundle'.	self deny: spec1 = spec2</body><body package="StoreCI-Support-Tests">isNotEqualIfVersionDiffers	&lt;test&gt;	| spec1 spec2 |	spec1 := PundleSpec forPackage: 'Pundle' version: '42'.	spec2 := PundleSpec forPackage: 'Pundle' version: '58'.	self deny: spec1 = spec2</body><body package="StoreCI-Support-Tests">knowsBundleComponentType	&lt;test&gt;	self assert: (PundleSpec forBundle: 'Bundle') componentType == #bundle</body><body package="StoreCI-Support-Tests">knowsPackageComponentType	&lt;test&gt;	self assert: (PundleSpec forPackage: 'Package') componentType == #package</body><body package="StoreCI-Support-Tests">parsesAllVersionedFromAStream	&lt;test&gt;	| contents specs |	contents := 'StorePackage	"PackageName"	42StoreBundle	"BundleName"	58'.	specs := PundleSpec allFrom: contents readStream.	self assert: specs asArray				= (Array with: (PundleSpec forPackage: 'PackageName' version: '42')						with: (PundleSpec forBundle: 'BundleName' version: '58'))</body><body package="StoreCI-Support-Tests">parsesAllVersionlessFromAStream	&lt;test&gt;	| contents specs |	contents := 'StorePackage	"PackageName"StoreBundle	"BundleName"'.	specs := PundleSpec allFrom: contents readStream.	self		assert: specs asArray = (Array with: (PundleSpec forPackage: 'PackageName')						with: (PundleSpec forBundle: 'BundleName'))</body><body package="StoreCI-Support-Tests">parsesVersionedBundleSpec	&lt;test&gt;	| spec |	spec := PundleSpec parse: 'StoreBundle	"BundleName"	42'.	self assert: spec = (PundleSpec forBundle: 'BundleName' version: '42')</body><body package="StoreCI-Support-Tests">parsesVersionedLegacyFormat	&lt;test&gt;	| spec |	spec := PundleSpec parse: 'PackageName	42'.	self assert: spec = (PundleSpec forPackage: 'PackageName' version: '42')</body><body package="StoreCI-Support-Tests">parsesVersionedPackageSpec	&lt;test&gt;	| spec |	spec := PundleSpec parse: 'StorePackage	"PackageName"	42'.	self assert: spec = (PundleSpec forPackage: 'PackageName' version: '42')</body><body package="StoreCI-Support-Tests">parsesVersionlessBundleSpec	&lt;test&gt;	| spec |	spec := PundleSpec parse: 'StoreBundle	"BundleName"'.	self assert: spec = (PundleSpec forBundle: 'BundleName')</body><body package="StoreCI-Support-Tests">parsesVersionlessLegacyFormat	&lt;test&gt;	| spec |	spec := PundleSpec parse: 'PackageName'.	self assert: spec = (PundleSpec forPackage: 'PackageName')</body><body package="StoreCI-Support-Tests">parsesVersionlessPackageSpec	&lt;test&gt;	| spec |	spec := PundleSpec parse: 'StorePackage	"PackageName"'.	self assert: spec = (PundleSpec forPackage: 'PackageName')</body><body package="StoreCI-Support-Tests">writesAllToAStream	&lt;test&gt;	| ws expected |	ws := String new writeStream.	PundleSpec writeAll: (Array with: (PundleSpec forPackage: 'PackageName')				with: (PundleSpec forBundle: 'BundleName'))		to: ws.	expected := 'StorePackage	"PackageName"StoreBundle	"BundleName"'.	self assert: ws contents = expected</body><body package="StoreCI-Support-Tests">writesVersionedToStream	&lt;test&gt;	| spec ws |	spec := PundleSpec forBundle: 'Name With Spaces' version: '42'.	ws := String new writeStream.	spec writeOn: ws.	self assert: ws contents = 'StoreBundle	"Name With Spaces"	42'</body><body package="StoreCI-Support-Tests">writesVersionlessToStream	&lt;test&gt;	| spec ws |	spec := PundleSpec forPackage: 'Name With Spaces'.	ws := String new writeStream.	spec writeOn: ws.	self assert: ws contents = 'StorePackage	"Name With Spaces"'</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystemTest</class-id> <category>tests</category><body package="StoreCI-Support-Tests">doesntExitIfAnyRequiredArgumentIsMissing	&lt;test&gt;	system := self newSystem.	system runActivationActions.	self assert: system exitCode isNil</body><body package="StoreCI-Support-Tests">doesntExitOnErrorWhenDebugging	&lt;test&gt;	self enableDebugging.	self ignoreErrorsDuring: [self runWithError].	self assert: system exitCode isNil</body><body package="StoreCI-Support-Tests">doesntExitOnSuccessWhenDebugging	&lt;test&gt;	self enableDebugging.	system runActivationActions.	self assert: system exitCode isNil</body><body package="StoreCI-Support-Tests">exitsWithNonZeroOnError	&lt;test&gt;	self runWithError.	self deny: system exitCode isZero</body><body package="StoreCI-Support-Tests">exitsWithZeroIfNoErrors	&lt;test&gt;	system runActivationActions.	self assert: system exitCode isZero</body><body package="StoreCI-Support-Tests">reportsErrors	&lt;test&gt;	self runWithError.	self assert: errorStream contents = 'Expected\' withCRs</body><body package="StoreCI-Support-Tests">reportsErrorsWhenDebugging	&lt;test&gt;	self enableDebugging.	self ignoreErrorsDuring: [self runWithError].	self assert: errorStream contents = 'Expected\' withCRs</body><body package="StoreCI-Support-Tests">reportsNoErrorsOnSuccess	&lt;test&gt;	system runActivationActions.	self assert: errorStream contents isEmpty</body><body package="StoreCI-Support-Tests">reraisesErrorsWhenDebugging	&lt;test&gt;	self enableDebugging.	self should: [self runWithError] raise: Error</body><body package="StoreCI-Support-Tests">runsWhenFullyConfigured	&lt;test&gt;	| runWasSent |	runWasSent := false.	system runUsing: [runWasSent := true].	self assert: runWasSent</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>