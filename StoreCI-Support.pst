<?xml version="1.0"?><st-source><!-- Name: StoreCI-SupportNotice: The MIT LicenseCopyright (c) 2012 - 2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: StoreCI is licensed under the MIT license.  See the Copyright tab in the RB, or the 'notice' property of this package.StoreCI-Support contains support code for StoreCI.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1473DbUsername: randyDbVersion: 14DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' ''))Namespace: StoreCI.SupportPackageName: StoreCI-SupportParcel: #('StoreCI-Support')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle))PrerequisiteParcels: #(#('Base VisualWorks' ''))PrintStringCache: (14,randy)Version: 14Date: 6:54:40 PM April 17, 2013 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on April 17, 2013 at 6:54:40 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>StoreCI</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category><attributes><package>StoreCI-Support</package></attributes></name-space><name-space><name>Support</name><environment>StoreCI</environment><private>false</private><imports>			private Smalltalk.*			</imports><category></category><attributes><package>StoreCI-Support</package></attributes></name-space><class><name>StoreCISubsystem</name><environment>StoreCI.Support</environment><super>Core.Subsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>debug errorStream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Support</package></attributes></class><comment><class-id>StoreCI.Support.StoreCISubsystem</class-id><body>StoreCISubsystem contains the common framework of all of the command-line interfaces in StoreCI.  It provides the -debug command-line option, as well as common error-handling and other behavior.Subclasses must implement the following messages:	private		run	private-testing		isReadyToRunInstance Variables	debug	&lt;Boolean&gt;	When true, exceptions are raised (not just logged), and the image doesn't exit upon completion.	errorStream	&lt;Stream&gt;	The stream to use when reporting errors.</body></comment><methods><class-id>StoreCI.Support.StoreCISubsystem</class-id> <category>initialize/release</category><body package="StoreCI-Support">clearCachedState	"Subsystem instances live forever in an image, so we need a way to reset the state when loading the image"	debug := false.	errorStream := Stderr</body><body package="StoreCI-Support">errorStream: aWriteStream	errorStream := aWriteStream</body><body package="StoreCI-Support">initialize	super initialize.	self clearCachedState</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystem</class-id> <category>private-activate/deactivate</category><body package="StoreCI-Support">runActivationActions	[super runActivationActions] on: Error		do: 			[:ex |			errorStream				nextPutAll: ex errorString;				cr.			debug ifTrue: [^ex pass].			^self exitWithCode: 1]</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystem</class-id> <category>default actions</category><body package="StoreCI-Support">resumeAction	"Subsystem instances live forever in an image, so we need a way to reset the state when loading the image"	super resumeAction.	self clearCachedState</body><body package="StoreCI-Support">setUp	self isReadyToRun ifFalse: [^self].	self validateArguments.	self run.	self exitCleanly</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystem</class-id> <category>private-testing</category><body package="StoreCI-Support">isReadyToRun	^self subclassResponsibility</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystem</class-id> <category>prerequisites</category><body package="StoreCI-Support">prerequisiteSystems	^Array with: RuntimeSystem</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystem</class-id> <category>private</category><body package="StoreCI-Support">exitCleanly	debug ifTrue: [^self].	self exitWithCode: 0</body><body package="StoreCI-Support">exitWithCode: anInteger	^ObjectMemory quitWithError: anInteger</body><body package="StoreCI-Support">run	^self subclassResponsibility</body><body package="StoreCI-Support">validateArguments	"Do nothing by default"	</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystem</class-id> <category>accessing</category><body package="StoreCI-Support">canActivate	"Don't activate the abstract base class"	^self class ~~ StoreCISubsystem</body></methods><methods><class-id>StoreCI.Support.StoreCISubsystem</class-id> <category>command line</category><body package="StoreCI-Support">enableDebugging	&lt;option: '-debug' sequence: -100&gt;	debug := true</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Subsystem</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state canActivate prerequisites </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>System-Subsystems</category><attributes><package>System-Subsystems</package></attributes></class></st-source>