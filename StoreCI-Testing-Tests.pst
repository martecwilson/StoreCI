<?xml version="1.0"?><st-source><!-- Name: StoreCI-Testing-TestsNotice: The MIT LicenseCopyright (c) 2012 - 2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: StoreCI is licensed under the MIT license.  See the Copyright tab in the RB, or the 'notice' property of this package.This package contains the unit tests for the StoreCI-Polling package.  See that package's comment for more information.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1444DbUsername: randyDbVersion: 26DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'StoreCI-Testing' '') #(#any 'StoreCI-Support-Tests' '') #(#any 'SUnitToo' ''))PackageName: StoreCI-Testing-TestsParcel: #('StoreCI-Testing-Tests')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'StoreCI-Testing' #componentType #package) #(#name 'StoreCI-Support-Tests' #componentType #package) #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('StoreCI-Testing' '') #('StoreCI-Support-Tests' '') #('SUnitToo' ''))PrintStringCache: (26,randy)Version: 26Date: 10:01:05 PM March 31, 2013 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on March 31, 2013 at 10:01:05 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SampleTestCase</name><environment>StoreCI.Testing</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>SampleSuiteBuilder</name><environment>StoreCI.Testing</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>suite </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>StubClockTest</name><environment>StoreCI.Testing</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>SuiteResultsTest</name><environment>StoreCI.Testing</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clock suiteResults </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>UnavailableResource</name><environment>StoreCI.Testing</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>TestingSubsystemTest</name><environment>StoreCI.Testing</environment><super>StoreCI.Support.StoreCISubsystemTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>XMLResultWriterTest</name><environment>StoreCI.Testing</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>StubTestingSubsystem</name><environment>StoreCI.Testing</environment><super>StoreCI.Testing.TestingSubsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>commandLineTokens exitCode runBlock testResult filteredClasses filteredPundles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>TraceTest</name><environment>StoreCI.Testing</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream trace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><class><name>StubClock</name><environment>StoreCI.Testing</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Testing-Tests</package></attributes></class><shared-variable><name>Current</name><environment>StoreCI.Testing.StubClock</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>StoreCI-Testing-Tests</package></attributes></shared-variable><methods><class-id>StoreCI.Testing.SampleTestCase</class-id> <category>tests</category><body package="StoreCI-Testing-Tests">error	"Not marked as a test; only run as part of SuiteResultsTest"	self error: 'Expected'</body><body package="StoreCI-Testing-Tests">fail	"Not marked as a test; only run as part of SuiteResultsTest"	self assert: false</body><body package="StoreCI-Testing-Tests">pass	"Not marked as a test; only run as part of SuiteResultsTest"	self assert: true</body><body package="StoreCI-Testing-Tests">timed	"Not marked as a test; only run as part of SuiteResultsTest"	StubClock current timePasses: 42 milliseconds.	self assert: true</body></methods><methods><class-id>StoreCI.Testing.SampleSuiteBuilder</class-id> <category>initialize-release</category><body package="StoreCI-Testing-Tests">initialize	super initialize.	suite := TestSuite new</body></methods><methods><class-id>StoreCI.Testing.SampleSuiteBuilder</class-id> <category>accessing</category><body package="StoreCI-Testing-Tests">suite	^suite</body></methods><methods><class-id>StoreCI.Testing.SampleSuiteBuilder</class-id> <category>buiding</category><body package="StoreCI-Testing-Tests">error	suite addTest: (SampleTestCase selector: #error)</body><body package="StoreCI-Testing-Tests">fail	suite addTest: (SampleTestCase selector: #fail)</body><body package="StoreCI-Testing-Tests">pass	suite addTest: (SampleTestCase selector: #pass)</body><body package="StoreCI-Testing-Tests">skip	suite addTest: (SampleTestCase selector: #skip)</body><body package="StoreCI-Testing-Tests">timed	suite addTest: (SampleTestCase selector: #timed)</body></methods><methods><class-id>StoreCI.Testing.SampleSuiteBuilder class</class-id> <category>instance creation</category><body package="StoreCI-Testing-Tests">new	^super new initialize</body></methods><methods><class-id>StoreCI.Testing.SuiteResultsTest</class-id> <category>initialize-release</category><body package="StoreCI-Testing-Tests">setUp	clock := StubClock current.	suiteResults := SuiteResults new</body><body package="StoreCI-Testing-Tests">tearDown	StubClock reset</body></methods><methods><class-id>StoreCI.Testing.SuiteResultsTest</class-id> <category>private</category><body package="StoreCI-Testing-Tests">assertAttribute: nameString equals: expectedString	self		assertAttribute: nameString		of: self xmlResults		equals: expectedString</body><body package="StoreCI-Testing-Tests">assertAttribute: nameString of: anElement equals: expectedString	self assert: (self attribute: nameString of: anElement) = expectedString</body><body package="StoreCI-Testing-Tests">attribute: aString of: anElement	^anElement valueOfAttribute: aString ifAbsent: [nil]</body><body package="StoreCI-Testing-Tests">buildSuite: aBlock	| builder |	builder := SampleSuiteBuilder new.	aBlock value: builder.	^builder suite</body><body package="StoreCI-Testing-Tests">runSampleSuite: aBlock	| runner |	TestCase noResultsWhile: 			[runner := SuiteRunner new.			suiteResults := runner results.			suiteResults injectClock: clock.			runner runSuite: (self buildSuite: aBlock)]</body><body package="StoreCI-Testing-Tests">xmlResults	^suiteResults asXML root</body></methods><methods><class-id>StoreCI.Testing.UnavailableResource</class-id> <category>Testing</category><body package="StoreCI-Testing-Tests">isAvailable	^false</body></methods><methods><class-id>StoreCI.Testing.TestingSubsystemTest</class-id> <category>initialize-release</category><body package="StoreCI-Testing-Tests">setUp	super setUp.	self setUpValidOutputFile</body><body package="StoreCI-Testing-Tests">setUpValidOutputFile	system addTokens: (Array with: '-testResultsFile' with: 'results.xml')</body><body package="StoreCI-Testing-Tests">subsystemClass	^StubTestingSubsystem</body></methods><methods><class-id>StoreCI.Testing.XMLResultWriterTest</class-id> <category>private</category><body package="StoreCI-Testing-Tests">rawResults	| writer ws |	writer := XMLResultWriter new.	ws := String new writeStream.	writer writeResults: SuiteResults new to: ws.	^ws contents</body></methods><methods><class-id>StoreCI.Testing.StubTestingSubsystem</class-id> <category>adding</category><body package="StoreCI-Testing-Tests">addTokens: anArray	commandLineTokens addAll: anArray</body></methods><methods><class-id>StoreCI.Testing.StubTestingSubsystem</class-id> <category>private-activate/deactivate</category><body package="StoreCI-Testing-Tests">commandLine	^commandLineTokens</body></methods><methods><class-id>StoreCI.Testing.StubTestingSubsystem</class-id> <category>accessing</category><body package="StoreCI-Testing-Tests">exitCode	^exitCode</body><body package="StoreCI-Testing-Tests">failTheTests	testResult := false</body><body package="StoreCI-Testing-Tests">filteredClasses	^filteredClasses</body><body package="StoreCI-Testing-Tests">filteredPundles	^filteredPundles</body><body package="StoreCI-Testing-Tests">runUsing: aBlock	runBlock := aBlock.	self runActivationActions</body></methods><methods><class-id>StoreCI.Testing.StubTestingSubsystem</class-id> <category>private</category><body package="StoreCI-Testing-Tests">basicRun	^testResult</body><body package="StoreCI-Testing-Tests">exitWithCode: anInteger	exitCode := anInteger</body><body package="StoreCI-Testing-Tests">run	runBlock ifNil: [super run] ifNotNil: #value</body></methods><methods><class-id>StoreCI.Testing.StubTestingSubsystem</class-id> <category>initialize/release</category><body package="StoreCI-Testing-Tests">initialize	super initialize.	commandLineTokens := OrderedCollection with: '/path/to/virtualMachine'				with: ObjectMemory imageName.	testResult := true.	filteredClasses := OrderedCollection new.	filteredPundles := OrderedCollection new</body></methods><methods><class-id>StoreCI.Testing.StubTestingSubsystem</class-id> <category>self shunt</category><body package="StoreCI-Testing-Tests">includeClasses: aCollection	filteredClasses addAll: aCollection</body><body package="StoreCI-Testing-Tests">includePundles: aCollection	filteredPundles addAll: aCollection</body><body package="StoreCI-Testing-Tests">makeSuiteBuilder	^self</body></methods><methods><class-id>StoreCI.Testing.TraceTest</class-id> <category>initialize-release</category><body package="StoreCI-Testing-Tests">setUp	stream := String new writeStream.	trace := Trace new injectStream: stream</body></methods><methods><class-id>StoreCI.Testing.StubClock</class-id> <category>initialize-release</category><body package="StoreCI-Testing-Tests">initialize	super initialize.	currentTime := 0</body></methods><methods><class-id>StoreCI.Testing.StubClock</class-id> <category>accessing</category><body package="StoreCI-Testing-Tests">microsecondClock	^currentTime</body><body package="StoreCI-Testing-Tests">timePasses: aDuration	currentTime := currentTime + aDuration asMicroseconds</body></methods><methods><class-id>StoreCI.Testing.StubClock class</class-id> <category>instance creation</category><body package="StoreCI-Testing-Tests">new	^super new initialize</body></methods><methods><class-id>StoreCI.Testing.StubClock class</class-id> <category>singleton</category><body package="StoreCI-Testing-Tests">current	^Current ifNil: [Current := self new]</body><body package="StoreCI-Testing-Tests">reset	Current := nil</body></methods><methods><class-id>StoreCI.Testing.SampleTestCase</class-id> <category>tests</category><body package="StoreCI-Testing-Tests">skip	"Not marked as a test; only run as part of SuiteResultsTest"	&lt;uses: #UnavailableResource&gt;	self assert: false description: 'Should never get here'</body></methods><methods><class-id>StoreCI.Testing.StubClockTest</class-id> <category>tests</category><body package="StoreCI-Testing-Tests">matchesProtocol	&lt;test&gt;	self		assert: (StubClock canUnderstand: #microsecondClock);		assert: (Time class canUnderstand: #microsecondClock)</body></methods><methods><class-id>StoreCI.Testing.SuiteResultsTest</class-id> <category>tests</category><body package="StoreCI-Testing-Tests">includesErrorStackTrace	&lt;test&gt;	| element textElement |	self runSampleSuite: [:builder | builder error].	element := (self xmlResults elementNamed: 'testcase')				elementNamed: 'error'.	textElement := element children first.	self assert: ('Expected*' match: textElement text)</body><body package="StoreCI-Testing-Tests">includesFailureStackTrace	&lt;test&gt;	| element textElement |	self runSampleSuite: [:builder | builder fail].	element := (self xmlResults elementNamed: 'testcase')				elementNamed: 'failure'.	textElement := element children first.	self assert: ('Assertion failed*' match: textElement text)</body><body package="StoreCI-Testing-Tests">includesNestedSkipElement	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder skip].	element := (self xmlResults elementNamed: 'testcase')				elementNamed: 'skipped'.	self assert: element notNil</body><body package="StoreCI-Testing-Tests">reportsErrorCount	&lt;test&gt;	self runSampleSuite: [:builder | builder error].	self assertAttribute: 'errors' equals: '1'</body><body package="StoreCI-Testing-Tests">reportsErrorMessage	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder error].	element := (self xmlResults elementNamed: 'testcase')				elementNamed: 'error'.	self assertAttribute: 'message' of: element equals: 'Expected'</body><body package="StoreCI-Testing-Tests">reportsErrorType	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder error].	element := (self xmlResults elementNamed: 'testcase')				elementNamed: 'error'.	self assertAttribute: 'type' of: element equals: 'Error'</body><body package="StoreCI-Testing-Tests">reportsFailingTests	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder fail].	element := self xmlResults elementNamed: 'testcase'.	self		assertAttribute: 'name'		of: element		equals: 'StoreCI.Testing.SampleTestCase&gt;&gt;#fail'</body><body package="StoreCI-Testing-Tests">reportsFailureCount	&lt;test&gt;	self runSampleSuite: [:builder | builder fail].	self assertAttribute: 'failures' equals: '1'</body><body package="StoreCI-Testing-Tests">reportsFailureMessage	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder fail].	element := (self xmlResults elementNamed: 'testcase')				elementNamed: 'failure'.	self assertAttribute: 'message' of: element equals: 'Assertion failed'</body><body package="StoreCI-Testing-Tests">reportsFailureType	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder fail].	element := (self xmlResults elementNamed: 'testcase')				elementNamed: 'failure'.	self assertAttribute: 'type' of: element equals: 'FailedAssertion'</body><body package="StoreCI-Testing-Tests">reportsPassingTests	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder pass].	element := self xmlResults elementNamed: 'testcase'.	self		assertAttribute: 'name'		of: element		equals: 'StoreCI.Testing.SampleTestCase&gt;&gt;#pass'</body><body package="StoreCI-Testing-Tests">reportsSkipCount	&lt;test&gt;	self runSampleSuite: [:builder | builder skip].	self assertAttribute: 'skipped' equals: '1'</body><body package="StoreCI-Testing-Tests">reportsSkippedTests	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder skip].	element := self xmlResults elementNamed: 'testcase'.	self		assertAttribute: 'name'		of: element		equals: 'StoreCI.Testing.SampleTestCase&gt;&gt;#skip'</body><body package="StoreCI-Testing-Tests">reportsSuiteRunTime	&lt;test&gt;	self runSampleSuite: [:builder | builder timed].	self assertAttribute: 'time' equals: '0.042'</body><body package="StoreCI-Testing-Tests">reportsTestCount	&lt;test&gt;	self runSampleSuite: 			[:builder |			builder				pass;				fail;				error].	self assertAttribute: 'tests' equals: '3'</body><body package="StoreCI-Testing-Tests">reportsTestRunTime	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder timed].	element := self xmlResults elementNamed: 'testcase'.	self assertAttribute: 'time' of: element equals: '0.042'</body><body package="StoreCI-Testing-Tests">reportsTestsWithErrors	&lt;test&gt;	| element |	self runSampleSuite: [:builder | builder error].	element := self xmlResults elementNamed: 'testcase'.	self		assertAttribute: 'name'		of: element		equals: 'StoreCI.Testing.SampleTestCase&gt;&gt;#error'</body><body package="StoreCI-Testing-Tests">sortsTests	&lt;test&gt;	| elements |	self runSampleSuite: 			[:builder |			builder				pass;				error;				fail].	elements := self xmlResults anyElementsNamed: 'testcase'.	self		assert: (elements collect: [:each | self attribute: 'name' of: each])				asArray					= #('StoreCI.Testing.SampleTestCase&gt;&gt;#error' 'StoreCI.Testing.SampleTestCase&gt;&gt;#fail' 'StoreCI.Testing.SampleTestCase&gt;&gt;#pass')</body></methods><methods><class-id>StoreCI.Testing.TestingSubsystemTest</class-id> <category>tests</category><body package="StoreCI-Testing-Tests">doesntFilterClassesByDefault	&lt;test&gt;	self assert: system filteredClasses isEmpty</body><body package="StoreCI-Testing-Tests">doesntFilterPackagesByDefault	&lt;test&gt;	self assert: system filteredPundles isEmpty</body><body package="StoreCI-Testing-Tests">doesntRunIfNoOutputFile	&lt;test&gt;	system := self newSystem.	self assertNotRun</body><body package="StoreCI-Testing-Tests">exitsWithNonZeroOnTestFailure	&lt;test&gt;	system failTheTests.	system runActivationActions.	self deny: system exitCode isZero</body><body package="StoreCI-Testing-Tests">filtersASingleBundle	&lt;test&gt;	| bundle |	bundle := Store.Registry bundleNamed: 'Base VisualWorks'.	system addTokens: (Array with: '-testBundles' with: bundle name).	system runActivationActions.	self assert: system filteredPundles asArray = (Array with: bundle)</body><body package="StoreCI-Testing-Tests">filtersASingleClass	&lt;test&gt;	system addTokens: (Array with: '-testClasses' with: self class fullName).	system runActivationActions.	self assert: system filteredClasses asArray = (Array with: self class)</body><body package="StoreCI-Testing-Tests">filtersASinglePackage	&lt;test&gt;	| package |	package := Store.Registry packageNamed: 'StoreCI-Testing-Tests'.	system addTokens: (Array with: '-testPackages' with: package name).	system runActivationActions.	self assert: system filteredPundles asArray = (Array with: package)</body><body package="StoreCI-Testing-Tests">filtersMultipleBundles	&lt;test&gt;	| bundles |	bundles := #('System' 'Collections')				collect: [:each | Store.Registry bundleNamed: each].	system addTokens: #('-testBundles') , (bundles collect: #name).	system runActivationActions.	self assert: system filteredPundles asArray = bundles</body><body package="StoreCI-Testing-Tests">filtersMultipleClasses	&lt;test&gt;	system addTokens: (Array				with: '-testClasses'				with: self class fullName				with: self class superclass fullName).	system runActivationActions.	self assert: system filteredClasses asArray				= (Array with: self class with: self class superclass)</body><body package="StoreCI-Testing-Tests">filtersMultiplePackages	&lt;test&gt;	| packages |	packages := #('StoreCI-Testing' 'StoreCI-Testing-Tests')				collect: [:each | Store.Registry packageNamed: each].	system addTokens: #('-testPackages') , (packages collect: #name).	system runActivationActions.	self assert: system filteredPundles asArray = packages</body></methods><methods><class-id>StoreCI.Testing.XMLResultWriterTest</class-id> <category>tests</category><body package="StoreCI-Testing-Tests">includesSuiteResultsXML	&lt;test&gt;	| results |	results := self rawResults.	self assert: ('*&lt;testsuite*' match: results)</body><body package="StoreCI-Testing-Tests">includesXMLHeader	&lt;test&gt;	| expected results |	expected := '&lt;?xml version="1.0"?&gt;'.	results := self rawResults.	self assert: (results first: expected size) = expected</body></methods><methods><class-id>StoreCI.Testing.TraceTest</class-id> <category>tests</category><body package="StoreCI-Testing-Tests">logsFailures	&lt;test&gt;	| testCase expected |	testCase := self class selector: thisContext selector.	trace testFinished: (Failure testCase: testCase).	expected := '&lt;1p&gt; Failure&lt;n&gt;' expandMacrosWith: testCase asDefinition.	self assert: stream contents = expected</body><body package="StoreCI-Testing-Tests">logsPasses	&lt;test&gt;	| testCase expected |	testCase := self class selector: thisContext selector.	trace testFinished: (Pass testCase: testCase).	expected := '&lt;1p&gt; Pass&lt;n&gt;' expandMacrosWith: testCase asDefinition.	self assert: stream contents = expected</body><body package="StoreCI-Testing-Tests">logsTestStarts	&lt;test&gt;	| testCase expected |	testCase := self class selector: thisContext selector.	trace testStarted: (Started testCase: testCase).	expected := '&lt;1p&gt; Started&lt;n&gt;' expandMacrosWith: testCase asDefinition.	self assert: stream contents = expected</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestingSubsystem</name><environment>StoreCI.Testing</environment><super>StoreCI.Support.StoreCISubsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outputFile suiteBuilder suiteRunner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>TestLogger</category><attributes><package>StoreCI-Testing</package></attributes></class><class><name>TestResource</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>StoreCISubsystemTest</name><environment>StoreCI.Support</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>errorStream system </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>StoreCI-Support-Tests</package></attributes></class></st-source>